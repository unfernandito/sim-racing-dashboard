# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]

jobs:
  build:
    defaults:
      run:
        working-directory: sim-racing-producer
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'sim-racing-producer/package-lock.json'
    - run: npm ci
      working-directory: sim-racing-producer
    - run: npm run build --if-present
      working-directory: sim-racing-producer
    - run: npm run test:ci
      working-directory: sim-racing-producer
    
    - id: repository
      uses: ASzc/change-string-case-action@v1
      with:
        string: "${{ github.repository }}"
    - uses: actions/checkout@v2

    - name: Preparation
      id: prep
      run: |
        REGISTRY="ghcr.io"
        IMAGE="${REGISTRY}/${{ steps.repository.outputs.lowercase }}"
        TAGS="${IMAGE}:${{ github.sha }},${IMAGE}:latest"
        REF=${GITHUB_REF,,}
        PREFIX="$(dirname $REF)"
        SUFFIX="$(basename $REF)"
        if [[ $PREFIX = "refs/heads" ]]; then
          TAGS="${TAGS},${IMAGE}:${SUFFIX}"
        elif [[ $PREFIX = "refs/tags" ]]; then
          RELEASE=${SUFFIX#"superalgos-"}
          TAGS="${TAGS},${IMAGE}:${RELEASE}"
        fi
        echo ::set-output name=tags::${TAGS}

    - name: Login in to registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
        
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Push to registry
      uses: docker/build-push-action@v2
      with:
        context: ./sim-racing-producer/
        push: true
        file: ./Dockerfile.production
        tags: ${{ steps.prep.outputs.tags }}
        platforms: linux/amd64,linux/arm64,linux/arm/v7
